{"name":"Marelle","tagline":"Test-driven system administration with a little extra logic.","body":"# Marelle (\"hopscotch\")\r\n\r\nTest-driven system administration in SWI-Prolog, in the style of [Babushka](https://github.com/babushka/babushka).\r\n\r\nMarelle uses [logic programming](https://en.wikipedia.org/wiki/Logic_programming) to describe system targets and rules by which these targets can be met. Prolog's built-in search mechanism makes writing and using these dependencies elegant. Anecdotally, writing deps for Marelle has the feel of teaching it about types of packages, rather than the feel of writing package templates.\r\n\r\n![Hopscotch for Seniors](https://raw.github.com/wiki/larsyencken/marelle/img/HopscotchForSeniors.jpg)\r\n\r\n## Current status\r\n\r\nWorking and in active use.\r\n\r\n## Features\r\n\r\nMarelle has some features common to other configuration management frameworks:\r\n\r\n- Checking and meeting dependencies (preconditions)\r\n- Testing whether a target installed correctly (post-conditions)\r\n- Ability to use platform-dependent instructions\r\n\r\nIt also has some interesting differences:\r\n\r\n- Can write checks (`met` predicates) without needing to say how to meet them (`meet` predicates)\r\n- The dependencies of a target can vary by platform\r\n- Succinct definition of new classes of packages using logical rules\r\n\r\n## Installing marelle\r\n\r\n### Quickstart\r\n\r\nRun the bootstrap script:\r\n\r\n```bash\r\nbash -c \"`curl https://raw.github.com/larsyencken/marelle/master/bootstrap.sh`\"\r\n```\r\n\r\nThis will install marelle as the current user, putting the executable in `~/.local/bin/marelle`.\r\n\r\n### Manual version\r\n\r\n1. Get Prolog\r\n    - On OS X, with Homebrew: `brew install swi-prolog`\r\n    - On Ubuntu, with apt-get: `sudo apt-get install swi-prolog-nox`\r\n2. Get git\r\n    - On OS X, with Homebrew: `brew install git`\r\n    - On Ubuntu, with apt-get: `sudo apt-get install git`\r\n3. Clone and set up marelle\r\n\r\n```bash\r\n# clone the repo\r\nmkdir -p ~/.local\r\ngit clone https://bitbucket.org/larsyencken/marelle ~/.local/marelle\r\n\r\n# set up an executable\r\ncat >~/.local/bin/marelle <<EOF\r\n#!/bin/bash\r\nexec swipl -q -t main -s ~/.local/marelle/marelle.pl \"$@\"\r\nEOF\r\nchmod a+x ~/.local/bin/marelle\r\n```\r\n\r\n## Writing deps\r\n\r\nMake a `marelle-deps/` folder inside your project repo. Each package has two components, a `met/2` goal which checks if the dependency is met, and an `meet/2` goal with instructions on how to actually meet it if it's missing.\r\n\r\nFor example, suppose I want to write a dep for Python that works on recent Ubuntu flavours. I might write:\r\n\r\n```prolog\r\n% python is a target to meet\r\npkg(python).\r\n\r\n% it's installed if it exists at /usr/bin/python\r\nmet(python, linux(_)) :- exists_file('/usr/bin/python').\r\n\r\n% we can install by running apt-get in shell\r\nmeet(python, linux(_)) :-\r\n    % could also use: install_apt('python-dev')\r\n    bash('sudo apt-get install -y python-dev').\r\n```\r\n\r\nTo install python on a machine, I'd now run `marelle meet python`.\r\n\r\nTo install pip, I might write:\r\n\r\n```prolog\r\npkg(pip).\r\n\r\n% pip is installed if we can run it\r\nmet(pip, _) :- which(pip).\r\n\r\n% on all flavours of linux, try to install the python-pip package\r\nmeet(pip, linux(_)) :- install_apt('python-pip').\r\n\r\n% on all platforms, pip depends on python\r\ndepends(pip, _, [python]).\r\n```\r\nNote our our use of platform specifiers and the `_` wildcard in their place. To see your current platform as described by marelle, run `marelle platform`. Examples include: `osx`, `linux(precise)` and `linux(raring)`.\r\n\r\n## Running deps\r\n\r\n### See available deps\r\n\r\nThis runs every `met/2` statement that's valid for your platform.\r\n\r\n`marelle scan`\r\n\r\n### Install something\r\n\r\nThis will run the `meet/2` clause for your package, provided a valid one exists for your current platform.\r\n\r\n`marelle meet python`\r\n\r\n### See your platform\r\n\r\nTo find the right platform code to use in deps you're writing, run:\r\n\r\n`marelle platform`\r\n\r\nIt reports the code for the platform you're currently on.\r\n\r\n## Where to put your deps\r\n\r\nLike both Babushka and Babashka, Marelle looks for deps in `~/.marelle/deps` and in a folder called `marelle-deps` in the current directory, if either exists. This allows you to set up a personal set of deps for your environment, as well as project-specific deps.\r\n\r\n## Examples\r\n\r\nSee my [marelle-deps](https://github.com/larsyencken/marelle-deps) repo for working examples.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}